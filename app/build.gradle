apply plugin: "com.android.application"
apply plugin: "org.owasp.dependencycheck"

def getGitVersion = { ->
    try {
        return "git -C ${rootDir} describe --tags --always --dirty".execute().text.trim()
    }
    catch (ignored) {
        return "git-not-found"
    }
}

repositories {
    maven {
        url "https://linphone.org/releases/maven_repository"
        //url "https://linphone.org/snapshots/maven_repository"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"

    defaultConfig {
        applicationId "org.simlar"
        minSdkVersion 16
        targetSdkVersion 29
        versionName getGitVersion()
        versionCode 49
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        if (useGoogleServices()) {
            push {
                dimension "default"
                versionName = android.defaultConfig.versionName
                buildConfigField("boolean", "IS_FCM_ENABLED", "true")
            }
        }

        alwaysOnline {
            dimension "default"
            versionName = android.defaultConfig.versionName + " (alwaysOnline)"
            buildConfigField("boolean", "IS_FCM_ENABLED", "false")
        }
    }


    def keystoreFile = System.getenv("KEYSTORE_FILE")
    def keystorePassword = System.getenv("KEYSTORE_PASSWORD")

    signingConfigs {
        release {
            storeFile keystoreFile == null ? null : file(keystoreFile)
            storePassword keystorePassword
            keyAlias "simlar"
            keyPassword keystorePassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            if (keystoreFile != null && keystorePassword != null) {
                println("signing with keystore: " + keystoreFile)
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    lintOptions {
        checkAllWarnings true
        disable "GoogleAppIndexingWarning", "UnknownNullness", "SyntheticAccessor", "DuplicateStrings"
        warningsAsErrors true
        warning "NewerVersionAvailable"
    }
}

dependencyCheck {
    suppressionFile = "owasp-dependency-check-suppression.xml"
    failBuildOnCVSS = 0
}
connectedCheck.dependsOn dependencyCheckAnalyze

ext {
    androidSupportVersion = "1.0.0"
    liblinphoneSdk = "linphone-sdk-android-release.aar"
}

dependencies {
    if (useGoogleServices()) {
        pushImplementation("com.google.firebase:firebase-messaging:20.1.0") {
            exclude group: "com.google.firebase", module: "firebase-core"
            exclude group: "com.google.firebase", module: "firebase-analytics"
            exclude group: "com.google.firebase", module: "firebase-measurement-connector"
        }
    }
    implementation("androidx.appcompat:appcompat:1.1.0")
    implementation("androidx.legacy:legacy-support-v4:${androidSupportVersion}")
    implementation("androidx.legacy:legacy-support-v13:${androidSupportVersion}")
    implementation("com.googlecode.libphonenumber:libphonenumber:8.11.0")

    if (new File("${rootDir}/app/libs/${liblinphoneSdk}").exists()) {
        println "using local linphone sdk build: ${liblinphoneSdk}"
        implementation fileTree(dir: "libs", include: ["${liblinphoneSdk}"])
    } else {
        implementation("org.linphone:linphone-sdk-android:4.2")
    }
}
